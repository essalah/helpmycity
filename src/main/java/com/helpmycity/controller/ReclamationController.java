package com.helpmycity.controller;

import com.helpmycity.Status;
import com.helpmycity.StatusCode;
import com.helpmycity.model.Reclamation;
import com.helpmycity.model.ReclamationRepository;
import com.helpmycity.util.FileTools;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Timestamp;
import java.util.UUID;

import static com.helpmycity.Config.UPLOADED_FOLDER;

@RestController
@RequestMapping(path = "/rec")
public class ReclamationController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ReclamationRepository reclamationRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public Object addNewUser(@RequestParam String category, @RequestParam String description,
                             @RequestParam("photo") MultipartFile photo, @RequestParam float latitude,
                             @RequestParam float longitude) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        try {

            UUID uuid = UUID.randomUUID();
            String photoName = uuid.toString() + "." + FileTools.getFileExtension(photo.getOriginalFilename());

            // Get the file and save it somewhere
            byte[] bytes = photo.getBytes();
            Path path = Paths.get(UPLOADED_FOLDER + photoName);
            Files.write(path, bytes);
            // the file has been saved successfully

            Reclamation reclamation = new Reclamation();

            reclamation.setCategory(category);
            reclamation.setDescription(description);
            reclamation.setPhoto(photoName);
            reclamation.setLatitude(latitude);
            reclamation.setLongitude(longitude);

            reclamationRepository.save(reclamation);


        } catch (IOException e) {
            e.printStackTrace();
            return new Status(StatusCode.FAILED, e.getMessage());
        }
        return new Status(StatusCode.SUCCESS, "SUCCESS");
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Page<Reclamation> getAllReclamation(Pageable pageable) {
        // This returns a JSON or XML with the users
        return reclamationRepository.findAll(pageable);
    }

    @GetMapping()
    public @ResponseBody
    Iterable<Reclamation> getAllUsers(@RequestParam String description) {
        // This returns a JSON or XML with the users
        return reclamationRepository.findAll();
    }
}
